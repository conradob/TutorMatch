module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.32.2). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateTutor {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar Long

type Mutation {
  createTutor(data: TutorCreateInput!): Tutor!
  updateTutor(data: TutorUpdateInput!, where: TutorWhereUniqueInput!): Tutor
  updateManyTutors(data: TutorUpdateManyMutationInput!, where: TutorWhereInput): BatchPayload!
  upsertTutor(where: TutorWhereUniqueInput!, create: TutorCreateInput!, update: TutorUpdateInput!): Tutor!
  deleteTutor(where: TutorWhereUniqueInput!): Tutor
  deleteManyTutors(where: TutorWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  tutor(where: TutorWhereUniqueInput!): Tutor
  tutors(where: TutorWhereInput, orderBy: TutorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tutor]!
  tutorsConnection(where: TutorWhereInput, orderBy: TutorOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TutorConnection!
  node(id: ID!): Node
}

type Subscription {
  tutor(where: TutorSubscriptionWhereInput): TutorSubscriptionPayload
}

type Tutor {
  id: ID!
  name: String!
  description: String!
}

type TutorConnection {
  pageInfo: PageInfo!
  edges: [TutorEdge]!
  aggregate: AggregateTutor!
}

input TutorCreateInput {
  id: ID
  name: String!
  description: String!
}

type TutorEdge {
  node: Tutor!
  cursor: String!
}

enum TutorOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
}

type TutorPreviousValues {
  id: ID!
  name: String!
  description: String!
}

type TutorSubscriptionPayload {
  mutation: MutationType!
  node: Tutor
  updatedFields: [String!]
  previousValues: TutorPreviousValues
}

input TutorSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TutorWhereInput
  AND: [TutorSubscriptionWhereInput!]
  OR: [TutorSubscriptionWhereInput!]
  NOT: [TutorSubscriptionWhereInput!]
}

input TutorUpdateInput {
  name: String
  description: String
}

input TutorUpdateManyMutationInput {
  name: String
  description: String
}

input TutorWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  AND: [TutorWhereInput!]
  OR: [TutorWhereInput!]
  NOT: [TutorWhereInput!]
}

input TutorWhereUniqueInput {
  id: ID
}
`
      }
    